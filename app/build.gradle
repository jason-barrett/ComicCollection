apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'idea'

/*
Tell gradle where to find generated code (e.g.,  by Dagger)
 */
idea {
    module {
        sourceDirs += file("$buildDir/generated")
    }
}

android {
    compileSdkVersion 32

    defaultConfig {
        applicationId "com.example.comiccollection"
        minSdkVersion 25
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"

        /*
        Use a custom InstrumentationRunner, which can create a custom application to own the
        activities under test.  The custom application will have a separate DI graph, allowing
        for substitution of fake dependencies.
         */
        //testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner "com.example.comiccollection.ComicCollectionTestRunner"

        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.1.0'

    /* ConstraintLayout */
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    /* Realtime Database */
    implementation 'com.google.firebase:firebase-database:19.3.1'

    /* Cloud Firestore */
    implementation 'com.google.firebase:firebase-firestore:22.0.0'

    /* RecyclerView */
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.recyclerview:recyclerview-selection:1.1.0'

    /* Lifecycle Components */
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel:2.2.0"

    /* Floating Action Button and other Material components */
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'org.jetbrains:annotations:15.0'

    /* Fragments */
    implementation 'androidx.fragment:fragment:1.4.0'

    /* JUnit Testing */
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'org.powermock:powermock-core:2.0.9'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
    testImplementation 'android.arch.core:core-testing:1.1.0'
    testImplementation project(path: ':app')

    /* Instrumented testing */
    androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation "androidx.test:rules:1.4.0"

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    //androidTestImplementation 'org.mockito:mockito-core:3.3.3'
    //androidTestImplementation 'org.mockito:mockito-android:2.7.15'
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.28.3'


    /* Dagger for dependency injection */
    implementation 'com.google.dagger:dagger:2.38.1'
    implementation 'com.google.dagger:dagger-android:2.38.1'
    implementation 'com.google.dagger:dagger-android-support:2.38.1'
    androidTestImplementation project(path: ':app')
    annotationProcessor 'com.google.dagger:dagger-compiler:2.38.1'
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.38.1'
}